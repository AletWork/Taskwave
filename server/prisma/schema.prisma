// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String    @unique
  password    String?   // Optionnel car certains utilisateurs pourraient s'authentifier uniquement via OAuth
  provider    Provider? // Le fournisseur OAuth utilisé
  providerId  String?   // ID unique de l'utilisateur chez le fournisseur OAuth
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  avatarUrl   String?
  ownedBoards Board[]   @relation("BoardOwner")
  tasks       Task[]    @relation("TaskAssignee")
}

model Board {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ownerId     String    @db.ObjectId
  owner       User      @relation("BoardOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  columns     Column[]
  backgroundColor String? // Optionnel pour personnaliser l'apparence
}

model Column {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  position    Int       // Pour l'ordre des colonnes
  boardId     String    @db.ObjectId
  board       Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks       Task[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  color       String?   // Optionnel pour personnaliser l'apparence
}

model Task {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  priority    Priority  @default(NORMAL)
  dueDate     DateTime?
  position    Int       // Pour l'ordre dans une colonne
  columnId    String    @db.ObjectId
  column      Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assigneeId  String?   @db.ObjectId
  assignee    User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  labels      String[]  // Tableau de tags/labels
  attachments String[]  // URLs ou chemins des pièces jointes
  completed   Boolean   @default(false)
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum Provider {
  DISCORD
  LOCAL // Pour les utilisateurs enregistrés localement avec email/mot de passe
}